- name: Create Kubelet Config
  hosts: k8sall
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:
    - name: Create Service Folder
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /etc/kubernetes/
        - /etc/kubernetes/ssl
        - /var/lib/kubelet
        - /var/log/kubernetes
        - /var/lib/kube-proxy
        - /etc/kubernetes/manifests

    - name: Create Kubelet JSON
      copy:
        content: |
          {
            "kind": "KubeletConfiguration",
            "apiVersion": "kubelet.config.k8s.io/v1beta1",
            "authentication": {
              "x509": {
                "clientCAFile": "/etc/kubernetes/ssl/ca.pem"
              },
              "webhook": {
                "enabled": true,
                "cacheTTL": "2m0s"
              },
              "anonymous": {
                "enabled": false
              }
            },
            "authorization": {
              "mode": "Webhook",
              "webhook": {
                "cacheAuthorizedTTL": "5m0s",
                "cacheUnauthorizedTTL": "30s"
              }
            },
            "address": "192.168.1.131",
            "port": 10250,
            "readOnlyPort": 10255,
            "cgroupDriver": "systemd",                    
            "hairpinMode": "promiscuous-bridge",
            "serializeImagePulls": false,
            "clusterDomain": "cluster.local.",
            "clusterDNS": ["10.96.0.2"]
          }
        dest: /etc/kubernetes/kubelet.json
    
    - name: Change Kubelet JSON IP
      shell: |
        sed -i "s/192.168.1.131/$(grep IPADDR /etc/sysconfig/network-scripts/ifcfg-ens192 | awk -F '=' '{print $2}' | tr -d '\n')/g" /etc/kubernetes/kubelet.json
    
    - name: Create Kubelet Service
      ansible.builtin.copy:
        dest: /usr/lib/systemd/system/kubelet.service
        content: |
          [Unit]
          Description=Kubernetes Kubelet
          Documentation=https://github.com/kubernetes/kubernetes
          After=network-online.target firewalld.service cri-docker.service docker.socket containerd.service
          Wants=network-online.target
          Requires=docker.socket containerd.service

          [Service]
          WorkingDirectory=/var/lib/kubelet
          ExecStart=/usr/local/bin/kubelet \
            --bootstrap-kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig \
            --cert-dir=/etc/kubernetes/ssl \
            --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \
            --container-runtime-endpoint=unix:///run/cri-dockerd.sock \
            --config=/etc/kubernetes/kubelet.json \
            --rotate-certificates \
            --v=2
          Restart=on-failure
          RestartSec=5
          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'  

    - name: Create Kube-Proxy.yaml
      ansible.builtin.copy:
        dest: /etc/kubernetes/kube-proxy.yaml
        content: |
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          bindAddress: 192.168.1.131
          clientConnection:
            kubeconfig: /etc/kubernetes/kube-proxy.kubeconfig
          clusterCIDR: 10.244.0.0/16
          healthzBindAddress: 192.168.1.131:10256
          kind: KubeProxyConfiguration
          metricsBindAddress: 192.168.1.131:10249
          mode: "ipvs"
        owner: root
        group: root
        mode: '0644' 
    - name: Change Kubelet JSON IP
      shell: |
        sed -i "s/192.168.1.131/$(grep IPADDR /etc/sysconfig/network-scripts/ifcfg-ens192 | awk -F '=' '{print $2}' | tr -d '\n')/g" /etc/kubernetes/kube-proxy.yaml
    
    - name: Create kube-proxy.service 
      ansible.builtin.copy:
        dest: /usr/lib/systemd/system/kube-proxy.service
        content: |
          [Unit]
          Description=Kubernetes Kube-Proxy Server
          Documentation=https://github.com/kubernetes/kubernetes
          After=network.target
          [Service]
          WorkingDirectory=/var/lib/kube-proxy
          ExecStart=/usr/local/bin/kube-proxy \
            --config=/etc/kubernetes/kube-proxy.yaml \
            --v=2
          Restart=on-failure
          RestartSec=5
          LimitNOFILE=65536

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644' 
    
- name: Create Kubelet & KUBE-PROXY Service
  hosts: k8s-master1
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:      
    - name: Create KUBELET-BOOTSTRAP.KUBECONFIG
      shell: |
        BOOTSTRAP_TOKEN=$(awk -F "," '{print $1}' /etc/kubernetes/token.csv)
        kubectl config set-cluster kubernetes --certificate-authority=/etc/ssl/ca.pem --embed-certs=true --server=https://192.168.1.130:8443 --kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig 
        kubectl config set-credentials kubelet-bootstrap --token=${BOOTSTRAP_TOKEN} --kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig
        kubectl config set-context default --cluster=kubernetes --user=kubelet-bootstrap --kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig
        kubectl config use-context default --kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig
        kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap 
        kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap --kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig
        kubectl create clusterrolebinding cluster-system-anonymous --clusterrole=cluster-admin --user=/etc/kubernetes/kubelet-bootstrap
      args:
        chdir: /etc/ssl 
    
    - name: Distribution Kubelet Config
      shell: |
        for i in $(cat /etc/hosts|grep k8s|grep -v $(hostname)|awk '{print $1}');do scp /etc/kubernetes/kubelet-bootstrap.kubeconfig root@$i:/etc/kubernetes/;done
        for i in $(cat /etc/hosts|grep k8s|grep -v k8s-master|awk '{print $1}');do scp /etc/ssl/ca.pem root@$i:/etc/kubernetes/ssl/;done
        for i in $(cat /etc/hosts|grep k8s-master|grep -v 192.168.1.131|awk '{print $1}');do scp -r /root/.kube root@$i:/root/;done
  
    - name: Create KUBE-PROXY JSON
      copy:
        content: |
          {
            "CN": "system:kube-proxy",
            "key": {
              "algo": "rsa",
              "size": 2048
            },
            "names": [
              {
                "C": "CN",
                "ST": "Beijing",
                "L": "Beijing",
                "O": "kubemsb",
                "OU": "CN"
              }
            ]
          }
        dest: /etc/ssl/kube-proxy-csr.json

    - name: Create KUBE-PROXY Cert
      shell: |
        cfssl gencert -ca=/etc/ssl/ca.pem -ca-key=/etc/ssl/ca-key.pem -config=/etc/ssl/ca-config.json -profile=kubernetes /etc/ssl/kube-proxy-csr.json | cfssljson -bare kube-proxy
        kubectl config set-cluster kubernetes --certificate-authority=/etc/ssl/ca.pem --embed-certs=true --server=https://192.168.1.130:8443 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig
        kubectl config set-credentials kube-proxy --client-certificate=/etc/ssl/kube-proxy.pem --client-key=/etc/ssl/kube-proxy-key.pem --embed-certs=true --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig
        kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig
        kubectl config use-context default --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig
      args:
        chdir: /etc/ssl 
  
    - name: Distribution KUBE-PROXY Config
      shell: |
        for i in $(cat /etc/hosts|grep k8s|grep -v $(hostname)|awk '{print $1}');do scp /etc/kubernetes/kube-proxy.kubeconfig root@$i:/etc/kubernetes/;done
        for i in $(cat /etc/hosts|grep k8s|awk '{print $1}');do scp /etc/ssl/kube-proxy*.pem root@$i:/etc/kubernetes/ssl/;done

- name: Copy Kubelet KUBE-PROXY To Folder
  hosts: k8s-client
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:    
    - name: Copy Kubelet Kubernetes KUBE-PROXY To Folder
      shell: |
        tar -zxvf /root/files/kubernetes/kubernetes-server-linux-amd64.tar.gz -C /root/files/kubernetes/
        cp /root/files/kubernetes/kubernetes/server/bin/{kubectl,kube-apiserver,kube-scheduler,kube-controller-manager,kubelet,kube-proxy} /usr/local/bin/

- name: Enable Kubelet Service 
  hosts: k8sall
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:
    - name: Enable Kubelet Service
      shell: |
        systemctl daemon-reload && systemctl enable --now kubelet
        systemctl daemon-reload && systemctl enable --now kube-proxy
        systemctl status kubelet 
        systemctl status kube-proxy

- name: Create Kubelet & KUBE-PROXY Service
  hosts: k8s-master1
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:  
    - name: Set Calico CoreDns IP
      shell: |
        sed -i 's/192.168.0.0/10.244.0.0/g' /root/files/calico/custom-resources.yaml 
        mv /root/files/coredns/coredns.yaml.sed /root/files/coredns/coredns.yaml
        sed -i '/app.kubernetes.io\/name: coredns/d' /root/files/coredns/coredns.yaml
        sed -i 's/UPSTREAMNAMESERVER/\/etc\/resolv.conf/g' /root/files/coredns/coredns.yaml
        sed -i 's/}STUBDOMAINS/}/g' /root/files/coredns/coredns.yaml
        sed -i 's/1.9.4/1.10.1/g' /root/files/coredns/coredns.yaml
        sed -i 's/CLUSTER_DNS_IP/10.96.0.2/' /root/files/coredns/coredns.yaml

    

