- name: Set K8S Master Env
  hosts: k8s-master
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:
    - name: Install  Keepalived && Haproxy
      shell: yum install keepalived haproxy -y
    
    - name: Replace haproxy.cfg with new content
      ansible.builtin.copy:
        dest: /etc/haproxy/haproxy.cfg
        content: |
          global
            maxconn  2000
            ulimit-n  16384
            log  127.0.0.1 local0 err
            stats timeout 30s

          defaults
            log global
            mode  http
            option  httplog
            timeout connect 5000
            timeout client  50000
            timeout server  50000
            timeout http-request 15s
            timeout http-keep-alive 15s

          frontend monitor-in
            bind *:33305
            mode http
            option httplog
            monitor-uri /monitor

          frontend k8s-master
            bind 0.0.0.0:8443
            #bind 127.0.0.1:8443
            mode tcp
            option tcplog
            tcp-request inspect-delay 5s
            default_backend k8s-master

          backend k8s-master
            mode tcp
            option tcplog
            option tcp-check
            balance roundrobin
            default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
            server k8s-master1    192.168.1.131:6443  check 
            server k8s-master2    192.168.1.132:6443  check
            server k8s-master3    192.168.1.133:6443  check
        owner: root
        group: root
        mode: '0644'

    - name: Enable Keepalived && Haproxy
      shell: systemctl enable haproxy && systemctl daemon-reload && systemctl start haproxy && systemctl restart haproxy
    
    - name: Create keepalived.conf
      shell: |
        touch /etc/keepalived/keepalived.conf
        touch /etc/keepalived/check_apiserver.sh

    - name: Replace keepalived.conf on master
      ansible.builtin.copy:
        dest: /etc/keepalived/keepalived.conf
        content: |
         ! Configuration File for keepalived
          global_defs {
              router_id LVS_DEVEL
              script_user root
              enable_script_security
          }
          vrrp_script chk_apiserver {
              script "/etc/keepalived/check_apiserver.sh"
              interval 5
              weight -5
              fall 2  
              rise 1
          }
          vrrp_instance VI_1 {
              state BACKUP
              interface ens192
              mcast_src_ip 192.168.1.131
              virtual_router_id 51
              priority 101 
              advert_int 2
              authentication {
                  auth_type PASS
                  auth_pass K8SHA_KA_AUTH
              }
              virtual_ipaddress {
                  192.168.1.130
              }
              track_script {
                chk_apiserver
              }
          }
        owner: root
        group: root
        mode: '0644'

    - name: Replace check_apiserver.sh on master
      ansible.builtin.copy:
        dest: /etc/keepalived/check_apiserver.sh
        content: |
         #!/bin/bash
        
          err=0
          for k in $(seq 1 3)
          do
              check_code=$(pgrep haproxy)
              if [[ $check_code == "" ]]; then
                  err=$(expr $err + 1)
                  sleep 1
                  continue
              else
                  err=0
                  break
              fi
          done
          
          if [[ $err != "0" ]]; then
              echo "systemctl stop keepalived"
              /usr/bin/systemctl stop keepalived
              exit 1
          else
              exit 0
          fi
        owner: root
        group: root
        mode: '0644'


- name: Set K8S keepalived Config
  hosts: k8s-master2
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:
    - name: Reset k8s-master2 keepalived Config
      shell: |
        sed -i 's/mcast_src_ip 192.168.1.131/mcast_src_ip 192.168.1.132/' /etc/keepalived/keepalived.conf
        sed -i 's/virtual_router_id 51/virtual_router_id 52/' /etc/keepalived/keepalived.conf
        sed -i 's/priority 101/priority 91/g' /etc/keepalived/check_apiserver.sh

- name: Set K8S keepalived Config
  hosts: k8s-master3
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:
    - name: Reset k8s-master3 keepalived Config
      shell: |
        sed -i 's/mcast_src_ip 192.168.1.131/mcast_src_ip 192.168.1.133/' /etc/keepalived/keepalived.conf
        sed -i 's/virtual_router_id 51/virtual_router_id 53/' /etc/keepalived/keepalived.conf
        sed -i 's/priority 101/priority 81/g' /etc/keepalived/check_apiserver.sh

- name: Enable Haproxy && Keepalived Service
  hosts: k8s-master
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:
    - name: Enable Haproxy && Keepalived Service
      shell: |
        chmod +x /etc/keepalived/check_apiserver.sh
        systemctl daemon-reload 
        systemctl enable --now haproxy  
        systemctl enable --now keepalived

- name: Request A Certificate
  hosts: k8s-master1
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:
    - name: Copy cfssl cfssl-certinfo cfssljson to folder
      shell: |
        cp /root/files/cfssl/cfssl_1.6.4_linux_amd64 /usr/local/bin/cfssl
        cp /root/files/cfssl/cfssl-certinfo_1.6.4_linux_amd64 /usr/local/bin/cfssl-certinfo
        cp /root/files/cfssl/cfssljson_1.6.4_linux_amd64 /usr/local/bin/cfssljson
        mkdir -p  /etc/etcd/ssl/
        mkdir -p /etc/etcd/cfg
        tar -zxvf /root/files/kubernetes/etcd/etcd-v3.5.10-linux-amd64.tar.gz -C /root/files/kubernetes/etcd/
        cp -a /root/files/kubernetes/etcd/etcd-v3.5.10-linux-amd64/{etcd,etcdctl} /usr/local/bin/

    - name: Set executable permissions for cfssl and cfssljson
      file:
        path: "/usr/local/bin/{{ item }}"
        mode: '0755'
        state: file
      loop:
        - cfssl
        - cfssljson
        - cfssl-certinfo

    - name: Create CA Config JSON Files
      shell: |
        mkdir -p /etc/ssl
        touch /etc/ssl/ca-config.json
        touch /etc/ssl/ca-csr.json
        touch /etc/ssl/etcd-csr.json
    - name: Create ca-config
      copy:
        content: |
          {
            "signing": {
                "default": {
                    "expiry": "876000h"
                  },
                "profiles": {
                    "kubernetes": {
                        "usages": [
                            "signing",
                            "key encipherment",
                            "server auth",
                            "client auth"
                        ],
                        "expiry": "876000h"
                    }
                }
            }
          }
        dest: /etc/ssl/ca-config.json

    - name: Create ca-csr
      copy:
        content: |
          {
            "CN": "kubernetes",
            "key": {
                "algo": "rsa",
                "size": 2048
            },
            "names": [
              {
                "C": "CN",
                "ST": "Beijing",
                "L": "Beijing",
                "O": "kubemsb",
                "OU": "CN"
              }
            ],
            "ca": {
                    "expiry": "876000h"
            }
          }
        dest: /etc/ssl/ca-csr.json

    - name: Create etcd-csr
      copy:
        content: |
          {
              "CN": "etcd",
              "hosts": [
              "127.0.0.1",
              "192.168.1.131",
              "192.168.1.132",
              "192.168.1.133"
              ],
              "key": {
                  "algo": "rsa",
                  "size": 2048
              },
              "names": [
                  {
                      "C": "CN",
                      "L": "BeiJing",
                      "ST": "BeiJing"
                  }
              ]
          }
        dest: /etc/ssl/etcd-csr.json
    
    - name: Create CA Certificate
      shell: cfssl gencert -initca /etc/ssl/ca-csr.json | cfssljson -bare ca
      args:
        chdir: /etc/ssl

    - name: Create ETCD Certificate
      shell: cfssl gencert -ca=/etc/ssl/ca.pem -ca-key=/etc/ssl/ca-key.pem -config=/etc/ssl/ca-config.json -profile=kubernetes /etc/ssl/etcd-csr.json | cfssljson -bare etcd
      args:
        chdir: /etc/ssl

    - name: Create K8S-Master1 etcd.conf 
      ansible.builtin.copy:
        dest: /etc/etcd/cfg/etcd.conf
        content: |
          #[Member]
          ETCD_NAME="etcd-1"
          ETCD_DATA_DIR="/var/lib/etcd/default.etcd"
          ETCD_LISTEN_PEER_URLS="https://{{ hostvars['k8s-master1']['ansible_host'] }}:2380"
          ETCD_LISTEN_CLIENT_URLS="https://{{ hostvars['k8s-master1']['ansible_host'] }}:2379,http://127.0.0.1:2379"
          #[Clustering]
          ETCD_INITIAL_ADVERTISE_PEER_URLS="https://{{ hostvars['k8s-master1']['ansible_host'] }}:2380"
          ETCD_ADVERTISE_CLIENT_URLS="https://{{ hostvars['k8s-master1']['ansible_host'] }}:2379"
          ETCD_INITIAL_CLUSTER="etcd-1=https://{{ hostvars['k8s-master1']['ansible_host'] }}:2380,etcd-2=https://{{ hostvars['k8s-master2']['ansible_host'] }}:2380,etcd-3=https://{{ hostvars['k8s-master3']['ansible_host'] }}:2380"
          ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster"
          ETCD_INITIAL_CLUSTER_STATE="new"
        owner: root
        group: root
        mode: '0644'
    
    - name: Create K8S-Master1 etcd service
      ansible.builtin.copy:
        dest: /usr/lib/systemd/system/etcd.service
        content: |
          [Unit]
          Description=Etcd Server
          After=network.target
          After=network-online.target
          Wants=network-online.target
          [Service]
          Type=notify
          EnvironmentFile=/etc/etcd/cfg/etcd.conf
          ExecStart=/usr/local/bin/etcd \
          --cert-file=/etc/etcd/ssl/etcd.pem \
          --key-file=/etc/etcd/ssl/etcd-key.pem \
          --peer-cert-file=/etc/etcd/ssl/etcd.pem \
          --peer-key-file=/etc/etcd/ssl/etcd-key.pem \
          --trusted-ca-file=/etc/etcd/ssl/ca.pem \
          --peer-trusted-ca-file=/etc/etcd/ssl/ca.pem \
          --logger=zap
          Restart=on-failure
          LimitNOFILE=65536
          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'

- name: Create K8S-Master2 ETCD Config
  hosts: k8s-master2
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:
    - name: Create K8S-Master2 etcd folder
      shell: |
        mkdir -p  /etc/etcd/ssl/
        mkdir -p /etc/etcd/cfg 
        tar -zxvf /root/files/kubernetes/etcd/etcd-v3.5.10-linux-amd64.tar.gz -C /root/files/kubernetes/etcd/
        cp -a /root/files/kubernetes/etcd/etcd-v3.5.10-linux-amd64/{etcd,etcdctl} /usr/local/bin/

    - name: Create K8S-Master2 etcd.conf 
      ansible.builtin.copy:
        dest: /etc/etcd/cfg/etcd.conf
        content: |
          #[Member]
          ETCD_NAME="etcd-2"
          ETCD_DATA_DIR="/var/lib/etcd/default.etcd"
          ETCD_LISTEN_PEER_URLS="https://{{ hostvars['k8s-master2']['ansible_host'] }}:2380"
          ETCD_LISTEN_CLIENT_URLS="https://{{ hostvars['k8s-master2']['ansible_host'] }}:2379,http://127.0.0.1:2379"
          #[Clustering]
          ETCD_INITIAL_ADVERTISE_PEER_URLS="https://{{ hostvars['k8s-master2']['ansible_host'] }}:2380"
          ETCD_ADVERTISE_CLIENT_URLS="https://{{ hostvars['k8s-master2']['ansible_host'] }}:2379"
          ETCD_INITIAL_CLUSTER="etcd-1=https://{{ hostvars['k8s-master1']['ansible_host'] }}:2380,etcd-2=https://{{ hostvars['k8s-master2']['ansible_host'] }}:2380,etcd-3=https://{{ hostvars['k8s-master3']['ansible_host'] }}:2380"
          ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster"
          ETCD_INITIAL_CLUSTER_STATE="new"
        owner: root
        group: root
        mode: '0644'
    
    - name: Create K8S-Master2 etcd service
      ansible.builtin.copy:
        dest: /usr/lib/systemd/system/etcd.service
        content: |
          [Unit]
          Description=Etcd Server
          After=network.target
          After=network-online.target
          Wants=network-online.target
          [Service]
          Type=notify
          EnvironmentFile=/etc/etcd/cfg/etcd.conf
          ExecStart=/usr/local/bin/etcd \
          --cert-file=/etc/etcd/ssl/etcd.pem \
          --key-file=/etc/etcd/ssl/etcd-key.pem \
          --peer-cert-file=/etc/etcd/ssl/etcd.pem \
          --peer-key-file=/etc/etcd/ssl/etcd-key.pem \
          --trusted-ca-file=/etc/etcd/ssl/ca.pem \
          --peer-trusted-ca-file=/etc/etcd/ssl/ca.pem \
          --logger=zap
          Restart=on-failure
          LimitNOFILE=65536
          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'
 
- name: Create K8S-Master3 ETCD Config
  hosts: k8s-master3
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:
    - name: Create K8S-Master3 etcd folder
      shell: |
        mkdir -p  /etc/etcd/ssl/
        mkdir -p /etc/etcd/cfg 
        tar -zxvf /root/files/kubernetes/etcd/etcd-v3.5.10-linux-amd64.tar.gz -C /root/files/kubernetes/etcd/
        cp -a /root/files/kubernetes/etcd/etcd-v3.5.10-linux-amd64/{etcd,etcdctl} /usr/local/bin/
    - name: Create K8S-Master3 etcd.conf 
      ansible.builtin.copy:
        dest: /etc/etcd/cfg/etcd.conf
        content: |
          #[Member]
          ETCD_NAME="etcd-3"
          ETCD_DATA_DIR="/var/lib/etcd/default.etcd"
          ETCD_LISTEN_PEER_URLS="https://{{ hostvars['k8s-master3']['ansible_host'] }}:2380"
          ETCD_LISTEN_CLIENT_URLS="https://{{ hostvars['k8s-master3']['ansible_host'] }}:2379,http://127.0.0.1:2379"
          #[Clustering]
          ETCD_INITIAL_ADVERTISE_PEER_URLS="https://{{ hostvars['k8s-master3']['ansible_host'] }}:2380"
          ETCD_ADVERTISE_CLIENT_URLS="https://{{ hostvars['k8s-master3']['ansible_host'] }}:2379"
          ETCD_INITIAL_CLUSTER="etcd-1=https://{{ hostvars['k8s-master1']['ansible_host'] }}:2380,etcd-2=https://{{ hostvars['k8s-master2']['ansible_host'] }}:2380,etcd-3=https://{{ hostvars['k8s-master3']['ansible_host'] }}:2380"
          ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster"
          ETCD_INITIAL_CLUSTER_STATE="new"
        owner: root
        group: root
        mode: '0644'
    
    - name: Create K8S-Master3 etcd service
      ansible.builtin.copy:
        dest: /usr/lib/systemd/system/etcd.service
        content: |
          [Unit]
          Description=Etcd Server
          After=network.target
          After=network-online.target
          Wants=network-online.target
          [Service]
          Type=notify
          EnvironmentFile=/etc/etcd/cfg/etcd.conf
          ExecStart=/usr/local/bin/etcd \
          --cert-file=/etc/etcd/ssl/etcd.pem \
          --key-file=/etc/etcd/ssl/etcd-key.pem \
          --peer-cert-file=/etc/etcd/ssl/etcd.pem \
          --peer-key-file=/etc/etcd/ssl/etcd-key.pem \
          --trusted-ca-file=/etc/etcd/ssl/ca.pem \
          --peer-trusted-ca-file=/etc/etcd/ssl/ca.pem \
          --logger=zap
          Restart=on-failure
          LimitNOFILE=65536
          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'

- name: Distribution ETCD Certificate
  hosts: k8s-master1
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:
    - name: Distribution ETCD Certificate  
      shell: |
         for i in $(cat /etc/hosts|grep master|awk '{print $1}');do scp /etc/ssl/ca.pem root@$i:/etc/etcd/ssl/;done
         for i in $(cat /etc/hosts|grep master|awk '{print $1}');do scp /etc/ssl/etcd*.pem root@$i:/etc/etcd/ssl/;done

- name: Enable K8S-Master ETCD
  hosts: k8s-master
  become: yes
  gather_facts: false
  vars:
    localhost_ip: "192.168.1.20"
    ansible_python_interpreter: /usr/bin/python3   
  vars_files:
    - vars.yml
  tasks:
    - name: Enable K8S-Master ETCD
      shell: |
        systemctl daemon-reload
        systemctl enable etcd
        systemctl start etcd

    - name: Check ETCD Member List
      shell: etcdctl member list -w table
      register: member_list

    - name: Check ETCD Cluster Master Node
      shell: ETCDCTL_API=3 /usr/local/bin/etcdctl --write-out=table --cacert=/etc/etcd/ssl/ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem --endpoints=https://192.168.1.131:2379,https://192.168.1.132:2379,https://192.168.1.133:2379 endpoint status
      register: master_node

    - name: Check ETCD Status
      shell: ETCDCTL_API=3 /usr/local/bin/etcdctl --write-out=table --cacert=/etc/etcd/ssl/ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem --endpoints=https://192.168.1.131:2379,https://192.168.1.132:2379,https://192.168.1.133:2379 endpoint health 
      register: etcd_status

    - name: Print ETCD Member List
      debug:
        var: member_list.stdout 

    - name: Print Check ETCD Cluster Master Node
      debug:
        var: master_node.stdout   
    
    - name: Print Check ETCD Status
      debug:
        var: etcd_status.stdout 